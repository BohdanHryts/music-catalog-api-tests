import pytest\nfrom src.models.api_models import CatalogType\n\n\nclass TestSearchAPI:\n    \"\"\"Integration tests for Search API functionality\"\"\"\n    \n    @pytest.mark.smoke\n    def test_basic_search_functionality(self, api_client, test_helpers):\n        \"\"\"Test basic search functionality works\"\"\"\n        response_data = api_client.search_simple(\"Dead and Company\")\n        \n        # Verify response structure\n        assert test_helpers.validate_search_response_schema(response_data)\n        \n        # Verify all expected keys are present\n        expected_keys = [\"albums\", \"artists\", \"tracks\", \"venues\", \"performanceYears\", \"performanceDates\"]\n        for key in expected_keys:\n            assert key in response_data\n            assert isinstance(response_data[key], list)\n    \n    @pytest.mark.catalog\n    @pytest.mark.parametrize(\"catalog_scenario,catalog_ids\", [\n        (\"nugs_only\", [\"nugs\"]),\n        (\"playdead_only\", [\"playDead\"]),\n        (\"both_catalogs\", [\"nugs\", \"playDead\"])\n    ])\n    def test_catalog_filtering(self, api_client, test_helpers, catalog_scenario, catalog_ids):\n        \"\"\"Test catalog filtering functionality\"\"\"\n        response_data = api_client.search_simple(\n            search_string=\"test query\",\n            catalog_ids=catalog_ids\n        )\n        \n        # Verify response structure\n        assert test_helpers.validate_search_response_schema(response_data)\n        \n        # Check catalog access rules\n        # This would need actual catalog ID data in response to validate properly\n        # For now, just verify the request was successful\n        assert \"albums\" in response_data\n    \n    @pytest.mark.search\n    def test_search_result_limits(self, api_client):\n        \"\"\"Test that search results respect the 50-item limit per category\"\"\"\n        response_data = api_client.search_simple(\"popular query\")\n        \n        # Verify hard limits\n        categories = [\"albums\", \"artists\", \"tracks\", \"venues\"]\n        for category in categories:\n            if category in response_data:\n                assert len(response_data[category]) <= 50, f\"{category} exceeded limit of 50\"\n    \n    @pytest.mark.search\n    def test_personalization_ranking(self, api_client):\n        \"\"\"Test that personalization is applied correctly\"\"\"\n        # Test with user ID for personalization\n        response_data = api_client.search_simple(\n            search_string=\"test query\",\n            user_id=\"test_user_123\"\n        )\n        \n        # Verify response structure (actual ranking validation would need more complex logic)\n        assert \"albums\" in response_data\n        assert \"artists\" in response_data\n        assert \"tracks\" in response_data\n    \n    @pytest.mark.search\n    def test_search_categories(self, api_client):\n        \"\"\"Test that all required search categories are supported\"\"\"\n        search_terms = {\n            \"song\": \"Truckin\",\n            \"album\": \"American Beauty\",\n            \"artist\": \"Grateful Dead\",\n            \"venue\": \"Madison Square Garden\",\n            \"date\": \"1995\",\n            \"year\": \"1995\"\n        }\n        \n        for category, term in search_terms.items():\n            response_data = api_client.search_simple(term)\n            \n            # Verify response structure\n            assert \"albums\" in response_data\n            assert \"artists\" in response_data\n            assert \"tracks\" in response_data\n            assert \"venues\" in response_data\n            assert \"performanceYears\" in response_data\n            assert \"performanceDates\" in response_data\n    \n    @pytest.mark.search\n    def test_empty_search_string(self, api_client):\n        \"\"\"Test handling of empty search string\"\"\"\n        # This should fail validation\n        with pytest.raises(Exception):  # Adjust based on actual error type\n            api_client.search_simple(\"\")\n    \n    @pytest.mark.search\n    def test_special_characters_in_search(self, api_client):\n        \"\"\"Test handling of special characters in search\"\"\"\n        special_queries = [\n            \"Fire on the Mountain\",\n            \"Sugar Magnolia (Live)\",\n            \"12/31/95\",\n            \"Dead & Company\"\n        ]\n        \n        for query in special_queries:\n            response_data = api_client.search_simple(query)\n            assert \"albums\" in response_data  # Basic validation