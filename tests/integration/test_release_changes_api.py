import pytest\nfrom src.models.api_models import ReleaseStatus, ObjectType, CatalogType\n\n\nclass TestReleaseChangesAPI:\n    \"\"\"Integration tests for Release Changes API functionality\"\"\"\n    \n    @pytest.mark.release_changes\n    def test_update_release_status_to_inactive(self, api_client, test_data_factory):\n        \"\"\"Test updating release status to inactive excludes from search\"\"\"\n        # Create a release change to inactive status\n        release_change = test_data_factory.create_release_change_request(\n            status=ReleaseStatus.INACTIVE\n        )\n        \n        # Update the release\n        response = api_client.update_release(release_change)\n        # Note: This would need actual API implementation to fully test\n        \n    @pytest.mark.release_changes\n    @pytest.mark.parametrize(\"status,should_be_active\", [\n        (ReleaseStatus.INACTIVE, False),\n        (ReleaseStatus.LIVE, True),\n        (ReleaseStatus.PRE_ORDER, True),\n        (ReleaseStatus.STAGING_ONLY, False),\n        (ReleaseStatus.HIDDEN_LIVE, False),\n        (ReleaseStatus.HIDDEN_PRE_ORDER, False)\n    ])\n    def test_release_status_filtering(self, api_client, test_data_factory, status, should_be_active):\n        \"\"\"Test that different release statuses are handled correctly\"\"\"\n        release_change = test_data_factory.create_release_change_request(status=status)\n        \n        # This would need integration with actual API\n        # For now, test the model validation\n        assert release_change.status == status\n        assert release_change.status in [0, 1, 2, 4, 5, 7]\n    \n    @pytest.mark.release_changes\n    def test_catalog_id_defaulting(self, api_client, test_data_factory):\n        \"\"\"Test that catalogIds defaults to nugs when not provided\"\"\"\n        # Create release without catalogIds\n        release_change = test_data_factory.create_release_change_request()\n        release_data = release_change.dict()\n        \n        # Remove catalogIds to test defaulting\n        if 'catalogIds' in release_data:\n            del release_data['catalogIds']\n        \n        # The API should default to nugs\n        # This would need actual API testing to verify\n        assert True  # Placeholder\n    \n    @pytest.mark.release_changes\n    def test_cross_catalog_updates(self, api_client, test_data_factory):\n        \"\"\"Test updates affecting multiple catalogs\"\"\"\n        release_change = test_data_factory.create_release_change_request(\n            catalog_ids=[CatalogType.NUGS, CatalogType.PLAY_DEAD]\n        )\n        \n        assert len(release_change.catalogIds) == 2\n        assert CatalogType.NUGS in release_change.catalogIds\n        assert CatalogType.PLAY_DEAD in release_change.catalogIds\n    \n    @pytest.mark.release_changes\n    def test_track_level_updates(self, api_client, test_data_factory):\n        \"\"\"Test track-level metadata updates\"\"\"\n        release_change = test_data_factory.create_release_change_request()\n        \n        # Verify tracks are included\n        assert len(release_change.tracks) > 0\n        \n        for track in release_change.tracks:\n            assert track.id is not None\n            assert track.songTitle is not None\n            assert track.duration > 0\n            assert track.showId is not None\n    \n    @pytest.mark.release_changes\n    def test_optional_fields_validation(self, api_client, test_data_factory):\n        \"\"\"Test that optional fields can be null or omitted\"\"\"\n        release_change = test_data_factory.create_release_change_request()\n        \n        # Test with null optional fields\n        release_change.albumTitle = None\n        release_change.albumAbbr = None\n        release_change.albumReleaseDate = None\n        release_change.venue = None\n        \n        # Should still be valid\n        release_dict = release_change.dict()\n        assert 'albumTitle' in release_dict\n        assert 'venue' in release_dict"